name: Release
on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: install requirements
        run: pip install -r requirements.txt
      - name: Upgrade DVC
        run: pip install --upgrade dvc
      - name: Run DVC pipeline
        run: dvc repro
      - name: run mllint
        run: mllint
      - name: run tests
        run: pytest --cov=src --cov-report=html
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: htmlcov/
      - name: Update README.md
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const fs = require('fs');

            // Read the coverage percentage from the generated report
            const reportPath = './htmlcov/index.html';  // Modify this if your coverage report path is different
            const reportContent = fs.readFileSync(reportPath, 'utf8');
            const coverageRegex = /<span class="pc_cov">([0-9]+)%<\/span>/;
            const coverageMatch = reportContent.match(coverageRegex);
            const coveragePercentage = coverageMatch ? coverageMatch[1] : 'N/A';

            // Generate the coverage badge Markdown
            const badgeUrl = `https://img.shields.io/badge/coverage-${coveragePercentage}%25-green.svg`;
            const badgeMarkdown = `[![Coverage](${badgeUrl})](${reportPath})`;

            // Read the README.md file
            const readmePath = './README.md';  // Modify this if your README.md path is different
            let readmeContent = fs.readFileSync(readmePath, 'utf8');

            // Update the README.md file with the coverage badge
            const badgeRegex = /\[!\[Coverage\]\(.+\)\]\(.+\)/;
            const updatedReadmeContent = readmeContent.replace(badgeRegex, badgeMarkdown);
            fs.writeFileSync(readmePath, updatedReadmeContent, 'utf8');
      - name: Registry Login (ghcr.io)
        run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Parse version info from tag
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      - name: Build and Push Docker Image
        run: |
          IMG=ghcr.io/${{ github.repository }}
          docker build \
            --tag $IMG:${{ env.version }} \
            --tag $IMG:${{ env.version_major }}.${{ env.version_minor }}.latest \
            --tag $IMG:${{ env.version_major }}.latest \
            --tag $IMG:latest \
            .
          docker push --all-tags $IMG